{"name": "test_vwologin", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //button[@id, js-login-btn] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//button[@id, js-login-btn]' is not a valid XPath expression.\n  (Session info: chrome=122.0.6261.128); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6D4FAAD02+56930]\n\t(No symbol) [0x00007FF6D4F1F602]\n\t(No symbol) [0x00007FF6D4DD42E5]\n\t(No symbol) [0x00007FF6D4DD9261]\n\t(No symbol) [0x00007FF6D4DDB6EB]\n\t(No symbol) [0x00007FF6D4DDB7B0]\n\t(No symbol) [0x00007FF6D4E1955C]\n\t(No symbol) [0x00007FF6D4E19A2C]\n\t(No symbol) [0x00007FF6D4E5A967]\n\t(No symbol) [0x00007FF6D4E3BCDF]\n\t(No symbol) [0x00007FF6D4E581E2]\n\t(No symbol) [0x00007FF6D4E3BA43]\n\t(No symbol) [0x00007FF6D4E0D438]\n\t(No symbol) [0x00007FF6D4E0E4D1]\n\tGetHandleVerifier [0x00007FF6D5326F8D+3711213]\n\tGetHandleVerifier [0x00007FF6D53804CD+4077101]\n\tGetHandleVerifier [0x00007FF6D537865F+4044735]\n\tGetHandleVerifier [0x00007FF6D5049736+706710]\n\t(No symbol) [0x00007FF6D4F2B8DF]\n\t(No symbol) [0x00007FF6D4F26AC4]\n\t(No symbol) [0x00007FF6D4F26C1C]\n\t(No symbol) [0x00007FF6D4F168D4]\n\tBaseThreadInitThunk [0x00007FFC5BC1257D+29]\n\tRtlUserThreadStart [0x00007FFC5BD6AA58+40]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c04c9445ecc172be31deae485a3d7a0\")>\n\n    @allure.epic(\"tc1: Positive testcase\")\n    @allure.feature(\"vwoLogin\")\n    def test_vwologin(setup):\n        driver = setup\n        login_page = Loginpage(driver)\n>       login_page.loign_page(user=\"contact+atb5x@thetestingacademy.com\", pwd=\"ATBx@1234\")\n\ntests\\vwoLogintests\\test_vwoLogin.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\pageObject\\loginpage.py:33: in loign_page\n    self.get_submitbtn().click()\ntests\\pageObject\\loginpage.py:25: in get_submitbtn\n    return self.driver.find_element(*Loginpage.submit)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002694047D1D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...07FF6D4F168D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC5BC1257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC5BD6AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //button[@id, js-login-btn] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//button[@id, js-login-btn]' is not a valid XPath expression.\nE         (Session info: chrome=122.0.6261.128); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6D4FAAD02+56930]\nE       \t(No symbol) [0x00007FF6D4F1F602]\nE       \t(No symbol) [0x00007FF6D4DD42E5]\nE       \t(No symbol) [0x00007FF6D4DD9261]\nE       \t(No symbol) [0x00007FF6D4DDB6EB]\nE       \t(No symbol) [0x00007FF6D4DDB7B0]\nE       \t(No symbol) [0x00007FF6D4E1955C]\nE       \t(No symbol) [0x00007FF6D4E19A2C]\nE       \t(No symbol) [0x00007FF6D4E5A967]\nE       \t(No symbol) [0x00007FF6D4E3BCDF]\nE       \t(No symbol) [0x00007FF6D4E581E2]\nE       \t(No symbol) [0x00007FF6D4E3BA43]\nE       \t(No symbol) [0x00007FF6D4E0D438]\nE       \t(No symbol) [0x00007FF6D4E0E4D1]\nE       \tGetHandleVerifier [0x00007FF6D5326F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF6D53804CD+4077101]\nE       \tGetHandleVerifier [0x00007FF6D537865F+4044735]\nE       \tGetHandleVerifier [0x00007FF6D5049736+706710]\nE       \t(No symbol) [0x00007FF6D4F2B8DF]\nE       \t(No symbol) [0x00007FF6D4F26AC4]\nE       \t(No symbol) [0x00007FF6D4F26C1C]\nE       \t(No symbol) [0x00007FF6D4F168D4]\nE       \tBaseThreadInitThunk [0x00007FFC5BC1257D+29]\nE       \tRtlUserThreadStart [0x00007FFC5BD6AA58+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "start": 1710502116581, "stop": 1710502117230, "uuid": "87b89a36-bd75-4f72-8d3d-5fd1bcfb8118", "historyId": "6700d9bf3dc42d27bb0c525b9c1730a0", "testCaseId": "6700d9bf3dc42d27bb0c525b9c1730a0", "fullName": "tests.vwoLogintests.test_vwoLogin#test_vwologin", "labels": [{"name": "feature", "value": "vwoLogin"}, {"name": "epic", "value": "tc1: Positive testcase"}, {"name": "parentSuite", "value": "tests.vwoLogintests"}, {"name": "suite", "value": "test_vwoLogin"}, {"name": "host", "value": "CMI109-Dipanshu"}, {"name": "thread", "value": "24544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLogintests.test_vwoLogin"}]}