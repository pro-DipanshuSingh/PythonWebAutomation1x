{"name": "test_vwologin_negative", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=123.0.6312.106)\nStacktrace:\n\tGetHandleVerifier [0x00007FF727767032+63090]\n\t(No symbol) [0x00007FF7276D2C82]\n\t(No symbol) [0x00007FF72756EB1D]\n\t(No symbol) [0x00007FF7275AFA67]\n\t(No symbol) [0x00007FF7275AE66B]\n\t(No symbol) [0x00007FF7275D6FDA]\n\t(No symbol) [0x00007FF7275AA00A]\n\t(No symbol) [0x00007FF7275D71F0]\n\t(No symbol) [0x00007FF7275F3412]\n\t(No symbol) [0x00007FF7275D6D83]\n\t(No symbol) [0x00007FF7275A83A8]\n\t(No symbol) [0x00007FF7275A9441]\n\tGetHandleVerifier [0x00007FF727B625AD+4238317]\n\tGetHandleVerifier [0x00007FF727B9F70D+4488525]\n\tGetHandleVerifier [0x00007FF727B979EF+4456495]\n\tGetHandleVerifier [0x00007FF727840576+953270]\n\t(No symbol) [0x00007FF7276DE54F]\n\t(No symbol) [0x00007FF7276D9224]\n\t(No symbol) [0x00007FF7276D935B]\n\t(No symbol) [0x00007FF7276C9B94]\n\tBaseThreadInitThunk [0x00007FF9DF73257D+29]\n\tRtlUserThreadStart [0x00007FF9E01EAA58+40]", "trace": "self = <test_vwoLoginPom.Testlogin object at 0x0000021F6FD59D90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bf826aa7d27d7ced8f44198872e33268\")>\n\n    @allure.epic(\"VWO Login Test\")\n    @allure.feature('TC#0 - VWO App Negative Test')\n    @pytest.mark.usefixtures(\"setup\")\n    def test_vwologin_negative(self, setup):\n        driver = setup\n        driver.get(self.url)\n        loginPage = Loginpage(driver)\n>       loginPage.login_page(user=\"admin\", pwd=\"admin\")\n\ntests\\vwoLogintests\\pom\\test_vwoLoginPom.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\pageObject\\loginpage.py:31: in login_page\n    self.get_user().send_keys(user)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F6FCDF0D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7276C9B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9DF73257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF9E01EAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=123.0.6312.106)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF727767032+63090]\nE       \t(No symbol) [0x00007FF7276D2C82]\nE       \t(No symbol) [0x00007FF72756EB1D]\nE       \t(No symbol) [0x00007FF7275AFA67]\nE       \t(No symbol) [0x00007FF7275AE66B]\nE       \t(No symbol) [0x00007FF7275D6FDA]\nE       \t(No symbol) [0x00007FF7275AA00A]\nE       \t(No symbol) [0x00007FF7275D71F0]\nE       \t(No symbol) [0x00007FF7275F3412]\nE       \t(No symbol) [0x00007FF7275D6D83]\nE       \t(No symbol) [0x00007FF7275A83A8]\nE       \t(No symbol) [0x00007FF7275A9441]\nE       \tGetHandleVerifier [0x00007FF727B625AD+4238317]\nE       \tGetHandleVerifier [0x00007FF727B9F70D+4488525]\nE       \tGetHandleVerifier [0x00007FF727B979EF+4456495]\nE       \tGetHandleVerifier [0x00007FF727840576+953270]\nE       \t(No symbol) [0x00007FF7276DE54F]\nE       \t(No symbol) [0x00007FF7276D9224]\nE       \t(No symbol) [0x00007FF7276D935B]\nE       \t(No symbol) [0x00007FF7276C9B94]\nE       \tBaseThreadInitThunk [0x00007FF9DF73257D+29]\nE       \tRtlUserThreadStart [0x00007FF9E01EAA58+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1712832519576, "stop": 1712832523049, "uuid": "5bdb5631-efd0-4a33-93d6-57d4ef81d437", "historyId": "5c69c6da29728386ceb83081b5a3c907", "testCaseId": "5c69c6da29728386ceb83081b5a3c907", "fullName": "tests.vwoLogintests.pom.test_vwoLoginPom.Testlogin#test_vwologin_negative", "labels": [{"name": "epic", "value": "VWO Login Test"}, {"name": "feature", "value": "TC#0 - VWO App Negative Test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.vwoLogintests.pom"}, {"name": "suite", "value": "test_vwoLoginPom"}, {"name": "subSuite", "value": "Testlogin"}, {"name": "host", "value": "CMI109-Dipanshu"}, {"name": "thread", "value": "2176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLogintests.pom.test_vwoLoginPom"}]}